import React, { useState } from "react";
import { useCountries } from "use-react-countries";
import {
  Card,
  CardHeader,
  CardBody,
  Input,
  Button,
  Typography,
  Tabs,
  TabsHeader,
  TabsBody,
  Tab,
  TabPanel,
  Select,
  Option,
} from "@material-tailwind/react";
import {
  BanknotesIcon,
  CreditCardIcon,
  LockClosedIcon,
} from "@heroicons/react/24/solid";
import DetailsPayment from "./DetailsPayment";
import ButtonBlockchain from "./ButtonBlockchain";
import ButtonAI from "./ButtonAI";
import { HashLoader } from "react-spinners";
import { useAldoAlert } from "aldo-alert";

function formatCardNumber(value) {
  const val = value.replace(/\s+/g, "").replace(/[^0-9]/gi, "");
  const matches = val.match(/\d{4,16}/g);
  const match = (matches && matches[0]) || "";
  const parts = [];

  for (let i = 0, len = match.length; i < len; i += 4) {
    parts.push(match.substring(i, i + 4));
  }

  if (parts.length) {
    return parts.join(" ");
  } else {
    return value;
  }
}

function formatExpires(value) {
  return value
    .replace(/[^0-9]/g, "")
    .replace(/^([2-9])$/g, "0$1")
    .replace(/^(1{1})([3-9]{1})$/g, "0$1/$2")
    .replace(/^0{1,}/g, "0")
    .replace(/^([0-1]{1}[0-9]{1})([0-9]{1,2}).*/g, "$1/$2");
}



export default function PayComponent() {
  const { countries } = useCountries();
  const [type, setType] = React.useState("metamask");
  const [cardNumber, setCardNumber] = React.useState("");
  const [cardExpires, setCardExpires] = React.useState("");
  const [note, setNote] = React.useState('');
  const [add, setAdd] = React.useState('');
  const [loading, setLoading] = useState(false);
  const [loadingMeta, setLoadingMeta] = useState(false);
  const { showAldoAlert } = useAldoAlert();

  // Function to handle generating note with AI
  const handleGenerateNote = (e) => {
    e.preventDefault();
    setLoading(true);
    // Here you can implement the logic to generate the note with AI
    // For now, let's just set a sample note
    const generatedNote = "This is a note generated with AI. You can see how useful it is!";
    const interval = 100; // Interval in milliseconds
    let index = 0;
    const timer = setInterval(() => {
      setNote((prevNote) => prevNote + generatedNote[index]);
      index++;
      if (index === generatedNote.length) {
        clearInterval(timer);
        setLoading(false);
        showAldoAlert('Note Generated by AI successfully!', 'warning');
      }
    }, interval);
  };

  const handleGenerateAddressMetamask = (e) => {
    e.preventDefault();
    setLoadingMeta(true);
    // Here you can implement the logic to generate the note with AI
    // For now, let's just set a sample note
    const generatedNote = "0xc0ffee254729296a45a3885639AC7E10F9d54979";
    const interval = 100; // Interval in milliseconds
    let index = 0;
    const timer = setInterval(() => {
      setAdd((prevNote) => prevNote + generatedNote[index]);
      index++;
      if (index === generatedNote.length) {
        clearInterval(timer);
        setLoadingMeta(false);
        showAldoAlert('Wallet Address Inputed by AI successfully!', 'warning');
      }
    }, interval);
  };

  const blockcahinPayment = () => {
    showAldoAlert('Data Payment in the blockchain successfully!', 'warning');
  }
  

  return (

    <Card className="w-full max-w-[24rem] mx-auto">
      <CardHeader
        color="gray"
        floated={false}
        shadow={false}
        className="m-0 grid place-items-center px-4 py-8 text-center"
      >
        <div className="mb-4 h-20 p-6 text-white">
          {type === "card" && (
            <CreditCardIcon className="h-10 w-10 text-white" />
          )}
          {type === "paypal" && (
            <img
              alt="paypal"
              className="w-14"
              src="https://docs.material-tailwind.com/icons/paypall.png"
            />
          )}
          {type === "metamask" && (
            <img
              alt="metamask"
              className="w-14"
              src="https://upload.wikimedia.org/wikipedia/commons/3/36/MetaMask_Fox.svg"
            />
          )}
        </div>
        <Typography variant="h5" color="white">
          BlockWise Checkout!
        </Typography>
      </CardHeader>
      <CardBody>
        <Tabs value={type} className="overflow-visible">
          <TabsHeader className="relative z-0">
            <Tab value="metamask" onClick={() => setType("metamask")}>
              Pay with MetaMask
            </Tab>
            <Tab value="card" onClick={() => setType("card")}>
              Pay with Card
            </Tab>
            <Tab value="paypal" onClick={() => setType("paypal")}>
              Pay with PayPal
            </Tab>
          </TabsHeader>
          <TabsBody
            className="!overflow-x-hidden !overflow-y-visible"
            animate={{
              initial: {
                x: type === "card" ? 400 : -400,
              },
              mount: {
                x: 0,
              },
              unmount: {
                x: type === "card" ? 400 : -400,
              },
            }}
          >
            <TabPanel value="card" className="p-0">
              <form className="mt-12 flex flex-col gap-4">
                <div>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mb-2 font-medium"
                  >
                    Your Email
                  </Typography>
                  <Input
                    type="email"
                    placeholder="name@mail.com"
                    className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                    labelProps={{
                      className: "before:content-none after:content-none",
                    }}
                  />
                </div>

                <div className="my-3">
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mb-2 font-medium"
                  >
                    Card Details
                  </Typography>

                  <Input
                    maxLength={19}
                    value={formatCardNumber(cardNumber)}
                    onChange={(event) => setCardNumber(event.target.value)}
                    icon={
                      <CreditCardIcon className="absolute left-0 h-4 w-4 text-blue-gray-300" />
                    }
                    placeholder="0000 0000 0000 0000"
                    className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                    labelProps={{
                      className: "before:content-none after:content-none",
                    }}
                  />
                  <div className="my-4 flex items-center gap-4">
                    <div>
                      <Typography
                        variant="small"
                        color="blue-gray"
                        className="mb-2 font-medium"
                      >
                        Expires
                      </Typography>
                      <Input
                        maxLength={5}
                        value={formatExpires(cardExpires)}
                        onChange={(event) =>
                          setCardExpires(event.target.value)
                        }
                        containerProps={{ className: "min-w-[72px]" }}
                        placeholder="00/00"
                        className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                        labelProps={{
                          className: "before:content-none after:content-none",
                        }}
                      />
                    </div>
                    <div>
                      <Typography
                        variant="small"
                        color="blue-gray"
                        className="mb-2 font-medium"
                      >
                        CVC
                      </Typography>
                      <Input
                        maxLength={4}
                        containerProps={{ className: "min-w-[72px]" }}
                        placeholder="000"
                        className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                        labelProps={{
                          className: "before:content-none after:content-none",
                        }}
                      />
                    </div>
                  </div>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mb-2 font-medium"
                  >
                    Holder Name
                  </Typography>
                  <Input
                    placeholder="name@mail.com"
                    className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                    labelProps={{
                      className: "before:content-none after:content-none",
                    }}
                  />
                </div>
                <Button size="lg">Pay Now</Button>
                <Typography
                  variant="small"
                  color="gray"
                  className="mt-2 flex items-center justify-center gap-2 font-medium opacity-60"
                >
                  <LockClosedIcon className="-mt-0.5 h-4 w-4" /> Payments are
                  secure and encrypted
                </Typography>
              </form>
            </TabPanel>
            <TabPanel value="paypal" className="p-0">
              <form className="mt-12 flex flex-col gap-4">
                <div>
                  <Typography
                    variant="paragraph"
                    color="blue-gray"
                    className="mb-4 font-medium"
                  >
                    Personal Details
                  </Typography>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mb-2 font-medium"
                  >
                    Your Email
                  </Typography>
                  <Input
                    type="email"
                    placeholder="name@mail.com"
                    className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                    labelProps={{
                      className: "before:content-none after:content-none",
                    }}
                  />
                </div>

                <div className="my-6">
                  <Typography
                    variant="paragraph"
                    color="blue-gray"
                    className="mb-4 font-medium"
                  >
                    Billing Address
                  </Typography>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mb-2 font-medium"
                  >
                    Country
                  </Typography>
                  <Select
                    placeholder="USA"
                    className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                    labelProps={{
                      className: "before:content-none after:content-none",
                    }}
                    menuProps={{ className: "h-48" }}
                  >
                    {countries.map(({ name, flags }) => (
                      <Option key={name} value={name}>
                        <div className="flex items-center gap-x-2">
                          <img
                            src={flags.svg}
                            alt={name}
                            className="h-4 w-4 rounded-full object-cover"
                          />
                          {name}
                        </div>
                      </Option>
                    ))}
                  </Select>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mt-4 -mb-2 font-medium"
                  >
                    Postal Code
                  </Typography>
                  <Input
                    placeholder="0000"
                    className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                    labelProps={{
                      className: "before:content-none after:content-none",
                    }}
                    containerProps={{ className: "mt-4" }}
                  />
                </div>
                <Button size="lg">Pay with PayPal</Button>
                <Typography
                  variant="small"
                  color="gray"
                  className="flex items-center justify-center gap-2 font-medium opacity-60"
                >
                  <LockClosedIcon className="-mt-0.5 h-4 w-4" /> Payments are
                  secure and encrypted
                </Typography>
              </form>
            </TabPanel>
            <TabPanel value="metamask" className="p-0">
              <form className="mt-12 flex flex-col gap-4">
                <div>

                  <Typography
                    variant="paragraph"
                    color="blue-gray"
                    className="mb-4 font-medium"
                  >
                    Connect MetaMask Wallet
                  </Typography>
                  <div className="flex flex-row gap-2 my-4">
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mb-2 font-medium"
                  >
                    MetaMask Wallet Address
                  </Typography>
                  <button
                      type="button" // Set type to "button" to prevent form submission

                      onClick={handleGenerateAddressMetamask}
                      className="px-5 py-2 text-sm bg-green-500 text-white rounded transition duration-300 ease-in-out hover:bg-green-700 hover:shadow-lg transform hover:-translate-y-1 w-[120px] flex items-center justify-center"
                    >
                      {loadingMeta ? <HashLoader color='#ffffff' size={20} /> : "AI Input"}
                    </button>
                    </div>
                  <Input
                    type="text"
                    placeholder="0x..."
                    value={add} // Bind the value of the input field to the generated note
                    onChange={(e) => setAdd(e.target.value)} // Allow user to edit the generated note if needed
                    className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                    labelProps={{
                      className: "before:content-none after:content-none",
                    }}
                  />
                  <div className="flex flex-row gap-2 my-4">
                    <Typography
                      variant="small"
                      color="blue-gray"
                      className="my-2 font-medium"
                    >
                      Leave Note
                    </Typography>
                    <button
                      type="button" // Set type to "button" to prevent form submission

                      onClick={handleGenerateNote}
                      className="px-5 py-2 text-sm bg-green-500 text-white rounded transition duration-300 ease-in-out hover:bg-green-700 hover:shadow-lg transform hover:-translate-y-1 w-[120px] flex items-center justify-center"
                    >
                      {loading ? <HashLoader color='#ffffff' size={20} /> : "Note AI"}
                    </button>
                  </div>
                  <Input
                    type="text"
                    value={note} // Bind the value of the input field to the generated note
                    onChange={(e) => setNote(e.target.value)} // Allow user to edit the generated note if needed
                    placeholder="Write your note"
                    className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                    labelProps={{
                      className: "before:content-none after:content-none",
                    }}
                  />

                </div>

                <Button size="lg" onClick={blockcahinPayment}>blockchain Payment</Button>
                <Typography
                  variant="small"
                  color="gray"
                  className="mt-2 flex items-center justify-center gap-2 font-medium opacity-60"
                >
                  <LockClosedIcon className="-mt-0.5 h-4 w-4" /> Payments are
                  secure and encrypted
                </Typography>
              </form>
            </TabPanel>
          </TabsBody>
        </Tabs>
      </CardBody>
    </Card>
  );
}
